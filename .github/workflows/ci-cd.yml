name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'
  REDIS_VERSION: '7'

jobs:
  # ✅ SENIOR APPROACH: Comprehensive testing pipeline
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    services:
      # MongoDB service
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      # Redis service
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json
            client/package-lock.json

      # ✅ BACKEND TESTING
      - name: 📦 Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: 🔍 Lint server code
        working-directory: ./server
        run: npm run lint || echo "Linting not configured"

      - name: 🏗️ Build server
        working-directory: ./server
        run: npm run build

      - name: 🧪 Test Redis connection
        working-directory: ./server
        run: npm run test:redis
        env:
          REDIS_URL: redis://localhost:6379

      - name: 🧪 Run server tests
        working-directory: ./server
        run: npm test || echo "Tests not configured yet"
        env:
          NODE_ENV: test
          MONGO_LOCAL_URI: mongodb://localhost:27017/simple_todos_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret

      # ✅ FRONTEND TESTING
      - name: 📦 Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: 🔍 Lint client code
        working-directory: ./client
        run: npm run lint || echo "Linting not configured"

      - name: 🏗️ Build client
        working-directory: ./client
        run: npm run build

      - name: 🧪 Run client tests
        working-directory: ./client
        run: npm test || echo "Tests not configured yet"

  # ✅ SENIOR APPROACH: Security scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run security audit (Server)
        working-directory: ./server
        run: npm audit --audit-level=high

      - name: 🔍 Run security audit (Client)
        working-directory: ./client
        run: npm audit --audit-level=high

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🛡️ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ✅ SENIOR APPROACH: Deployment pipeline
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://your-app-staging.vercel.app

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./server
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-app.vercel.app

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./server
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: 📊 Performance Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://your-app.vercel.app
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ✅ SENIOR APPROACH: Notification on deployment
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 Deployment Status: ${{ job.status }}
            📦 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            🔗 URL: https://your-app.vercel.app
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
